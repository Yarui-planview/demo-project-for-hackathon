/**
 * Application Performance Widgets
 * Multi-service Kafka streaming performance monitoring
 * 
 * IMPORTANT: Rate metrics (MessagesSentPerSecond, MessagesReceivedPerSecond) 
 * are already calculated as per-second values by the application, so we use 
 * AVERAGE statistic, not SUM, to avoid double-counting.
 */

import { Duration } from 'aws-cdk-lib';
import {
  GraphWidget,
  Metric,
  Unit,
  Statistic,
  TextWidget,
  Row,
  GraphWidgetView,
} from 'aws-cdk-lib/aws-cloudwatch';
import { DeploymentConfig, NamingHelper } from '../../lib/config-types-and-helpers';

export class ApplicationWidgets {
  
  /**
   * Create application performance section header
   */
  static createSectionHeader(): TextWidget {
    return new TextWidget({
      markdown: `## ðŸš€ Application Performance Metrics`,
      width: 24,
      height: 1,
    });
  }

  /**
   * Create service throughput comparison widget
   */
  static createServiceThroughputComparison(region: string, deploymentConfig: DeploymentConfig): Row {
    const metrics: Metric[] = [];

    // Add producer metrics for each service
    deploymentConfig.services.forEach((service, index) => {
      const serviceLabel = `Service-${index} (${service.topics}T/${service.partitionsPerTopic}P/${service.instances}I/${NamingHelper.formatMessageSize(service.messageSizeBytes)})`;
      const colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b'];
      
      // Producer metric - Use AVERAGE because app sends rate values
      metrics.push(
        new Metric({
          namespace: 'MSKExpress/Kafka',
          metricName: 'MessagesSentPerSecond',
          dimensionsMap: {
            Service: `dev-mske-service-${index}`,
            Environment: 'production',
          },
          statistic: Statistic.AVERAGE,  // Rate metrics should use AVERAGE
          period: Duration.minutes(1),
          unit: Unit.COUNT_PER_SECOND,
          label: `${serviceLabel} Producer`,
          color: colors[index % colors.length],
        })
      );

      // Consumer metric - Use AVERAGE because app sends rate values
      metrics.push(
        new Metric({
          namespace: 'MSKExpress/Kafka',
          metricName: 'MessagesReceivedPerSecond',
          dimensionsMap: {
            Service: `dev-mske-service-${index}`,
            Environment: 'production',
          },
          statistic: Statistic.AVERAGE,  // Rate metrics should use AVERAGE
          period: Duration.minutes(1),
          unit: Unit.COUNT_PER_SECOND,
          label: `${serviceLabel} Consumer`,
          color: colors[index % colors.length],
        })
      );
    });

    return new Row(
      new GraphWidget({
        title: 'Service Throughput Comparison (Messages/Second)',
        width: 24,
        height: 8,
        left: metrics,
        view: GraphWidgetView.TIME_SERIES,
        stacked: false,
        region,
      })
    );
  }

  /**
   * Create individual service performance widgets
   */
  static createServicePerformanceRow(deploymentConfig: DeploymentConfig): Row {
    const widgets = deploymentConfig.services.slice(0, 3).map((service, index) => {
      const serviceLabel = `Service-${index} (${service.topics}T/${service.partitionsPerTopic}P/${service.instances}I)`;
      
      return new GraphWidget({
        title: `${serviceLabel} Performance`,
        width: 8,
        height: 6,
        left: [
          new Metric({
            namespace: 'MSKExpress/Kafka',
            metricName: 'MessagesSentPerSecond',
            dimensionsMap: {
              Service: `dev-mske-service-${index}`,
              Environment: 'production',
            },
            statistic: Statistic.AVERAGE,  // Rate metrics should use AVERAGE
            period: Duration.minutes(1),
            unit: Unit.COUNT_PER_SECOND,
            label: 'Producer Rate',
            color: '#1f77b4',
          }),
          new Metric({
            namespace: 'MSKExpress/Kafka',
            metricName: 'MessagesReceivedPerSecond',
            dimensionsMap: {
              Service: `dev-mske-service-${index}`,
              Environment: 'production',
            },
            statistic: Statistic.AVERAGE,  // Rate metrics should use AVERAGE
            period: Duration.minutes(1),
            unit: Unit.COUNT_PER_SECOND,
            label: 'Consumer Rate',
            color: '#ff7f0e',
          }),
        ],
        view: GraphWidgetView.TIME_SERIES,
      });
    });

    return new Row(...widgets);
  }

  /**
   * Create service latency comparison widget
   */
  static createServiceLatencyComparison(region: string, deploymentConfig: DeploymentConfig): Row {
    const metrics: Metric[] = [];
    const colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b'];

    // Add average latency metrics for each service
    deploymentConfig.services.forEach((service, index) => {
      metrics.push(
        new Metric({
          namespace: 'MSKExpress/Kafka',
          metricName: 'MessageLatencyAverage',
          dimensionsMap: {
            Service: `dev-mske-service-${index}`,
            Environment: 'production',
          },
          statistic: Statistic.AVERAGE,  // Latency averages should use AVERAGE
          period: Duration.minutes(1),
          unit: Unit.MILLISECONDS,
          label: `Service-${index} Avg Latency`,
          color: colors[index % colors.length],
        })
      );
    });

    // Add P95 latency metrics for each service
    deploymentConfig.services.forEach((service, index) => {
      metrics.push(
        new Metric({
          namespace: 'MSKExpress/Kafka',
          metricName: 'MessageLatencyP95',
          dimensionsMap: {
            Service: `dev-mske-service-${index}`,
            Environment: 'production',
          },
          statistic: Statistic.AVERAGE,  // P95 values should use AVERAGE
          period: Duration.minutes(1),
          unit: Unit.MILLISECONDS,
          label: `Service-${index} P95 Latency`,
          color: colors[(index + 3) % colors.length],
        })
      );
    });

    return new Row(
      new GraphWidget({
        title: 'Service Latency Comparison (Milliseconds)',
        width: 24,
        height: 8,
        left: metrics,
        view: GraphWidgetView.TIME_SERIES,
        stacked: false,
        region,
      })
    );
  }

  /**
   * Create message size impact analysis widget
   */
  static createMessageSizeAnalysis(region: string, deploymentConfig: DeploymentConfig): Row {
    const throughputMetrics: Metric[] = [];
    const latencyMetrics: Metric[] = [];
    const colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b'];

    deploymentConfig.services.forEach((service, index) => {
      const messageSize = NamingHelper.formatMessageSize(service.messageSizeBytes);
      
      throughputMetrics.push(
        new Metric({
          namespace: 'MSKExpress/Kafka',
          metricName: 'MessagesSentPerSecond',
          dimensionsMap: {
            Service: `dev-mske-service-${index}`,
            Environment: 'production',
          },
          statistic: Statistic.AVERAGE,  // Rate metrics should use AVERAGE
          period: Duration.minutes(1),
          unit: Unit.COUNT_PER_SECOND,
          label: `${messageSize} Messages`,
          color: colors[index % colors.length],
        })
      );

      latencyMetrics.push(
        new Metric({
          namespace: 'MSKExpress/Kafka',
          metricName: 'MessageLatencyAverage',
          dimensionsMap: {
            Service: `dev-mske-service-${index}`,
            Environment: 'production',
          },
          statistic: Statistic.AVERAGE,  // Latency averages should use AVERAGE
          period: Duration.minutes(1),
          unit: Unit.MILLISECONDS,
          label: `${messageSize} Latency`,
          color: colors[index % colors.length],
        })
      );
    });

    return new Row(
      new GraphWidget({
        title: 'Message Size Impact - Throughput (Messages/Second)',
        width: 12,
        height: 6,
        left: throughputMetrics,
        view: GraphWidgetView.TIME_SERIES,
        region,
      }),
      new GraphWidget({
        title: 'Message Size Impact - Latency (Milliseconds)',
        width: 12,
        height: 6,
        left: latencyMetrics,
        view: GraphWidgetView.TIME_SERIES,
        region,
      })
    );
  }

  /**
   * Create consumer lag monitoring widget
   */
  static createConsumerLagMonitoring(deploymentConfig: DeploymentConfig): Row {
    const widgets = deploymentConfig.services.slice(0, 3).map((service, index) => {
      return new GraphWidget({
        title: `Service-${index} Consumer Lag`,
        width: 8,
        height: 6,
        left: [
          new Metric({
            namespace: 'MSKExpress/Kafka',
            metricName: 'ConsumerLag',
            dimensionsMap: {
              Service: `dev-mske-service-${index}`,
              Environment: 'production',
            },
            statistic: Statistic.AVERAGE,  // Lag values should use AVERAGE
            period: Duration.minutes(1),
            unit: Unit.COUNT,
            label: 'Consumer Lag',
            color: '#d62728',
          }),
        ],
        view: GraphWidgetView.TIME_SERIES,
      });
    });

    return new Row(...widgets);
  }
}
